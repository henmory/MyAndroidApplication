1.观察者设计模式注意是在subject对象发生变化后即使通知所有个观察者

2.因而有个suject抽象类，里面有个arraylist存放所有的观察者

3.抽象subject有注册／注销和通知接口

4.实际的subject实现这些接口，当状态发生变化是调用nofify

5.同时也需要在实际的主题对象定义一个state，当它发生变化时通知

6.实际的观察者实现update接口，这样当通知过来的时候可以调用自己的update

7.上面的方式在注册观察者的时候需要subject调用register注册，我们也可以在obsever中加入实际的subject引用，这样观察者可以自己注册，但是这个影响不大

8.上面的方式都是推的方式

9.如果是拉的方式，那么需要observer保存自己的状态，在更新之前先去subject中获取它的状态，如果两个状态一样，不更新，如果不一样，更新